---
import Layout from "../../layouts/Layout.astro";
import AppShell from "../../components/AppShell.astro";
import { loadBlogPosts } from "../../data/blog";

export async function getStaticPaths() {
  const posts = loadBlogPosts();
  const publishedPosts = posts.filter((post) => post.status === "published");

  return publishedPosts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;

// Utility function to generate consistent colors for tags
const getTagColor = (tag: string): string => {
  const colors = [
    "badge-primary",
    "badge-secondary",
    "badge-accent",
    "badge-info",
    "badge-success",
    "badge-warning",
    "badge-error",
  ];

  // Simple hash function to consistently map tags to colors
  let hash = 0;
  for (const char of tag) {
    hash = (hash * 31 + char.charCodeAt(0)) % 1000000;
  }
  return colors[Math.abs(hash) % colors.length];
};

const formatDate = (date: Date): string => {
  return date.toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
};
---

<Layout
  title={`${post.title} - Gabriele Angeletti`}
  description={post.excerpt || post.content.substring(0, 160)}
>
  <AppShell>
    <div id="blog-post" class="p-12">
      <div class="max-w-4xl mx-auto">
        <!-- Back button -->
        <div class="mb-8">
          <a href="/blog" class="btn btn-ghost btn-sm"> ← Back to Blog </a>
        </div>

        <!-- Post header -->
        <header class="mb-8">
          <div class="flex flex-wrap gap-2 mb-6">
            {
              post.tags.map((tag) => (
                <a
                  href={`/blog/tag/${tag}`}
                  class={`badge ${getTagColor(tag)} hover:scale-105 transition-transform cursor-pointer`}
                >
                  {tag}
                </a>
              ))
            }
          </div>

          <h1 class="text-5xl font-bold text-base-content mb-6 leading-tight">{post.title}</h1>

          <div class="flex items-center gap-4 text-base-content/60 mb-8">
            {
              post.author && (
                <>
                  <span class="font-medium">By {post.author}</span>
                  <span>•</span>
                </>
              )
            }
            <span>{formatDate(post.timestamp)}</span>
          </div>
        </header>

        <!-- Post content -->
        <article class="prose prose-lg max-w-none">
          <div class="text-base-content/80 leading-relaxed text-lg space-y-6">
            {post.content.split("\n\n").map((paragraph) => <p class="mb-6">{paragraph}</p>)}
          </div>
        </article>

        <!-- Post footer -->
        <footer class="mt-12 pt-8 border-t border-base-300">
          <div class="flex justify-between items-center">
            <div class="flex flex-wrap gap-2">
              <span class="text-base-content/60 text-sm">Tags:</span>
              {
                post.tags.map((tag) => (
                  <a
                    href={`/blog/tag/${tag}`}
                    class={`badge ${getTagColor(tag)} badge-sm hover:scale-105 transition-transform cursor-pointer`}
                  >
                    {tag}
                  </a>
                ))
              }
            </div>
            <a href="/blog" class="btn btn-primary btn-sm"> More Posts </a>
          </div>
        </footer>
      </div>
    </div>
  </AppShell>
</Layout>
